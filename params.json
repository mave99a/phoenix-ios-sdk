{"name":"Phoenix iOS SDK","tagline":"TSPhoenix","body":"## Overview\r\n\r\nTigerspike Phoenix SDK (TSPhoenix) is an iOS SDK for [Tigerspike Phoenix Platform](http://developers.phoenixplatform.com/GettingStarted). By using the SDK instead of the HTTP APIs, you can save massive amount of development time, interface with objective-level APIs and focus your time and energy on the UI.\r\n\r\n- Native Objective-C APIs\r\n- Native Objective-C models, with 100% coverage of Phoenix server side models\r\n- Seamless integration with Cocoapods\r\n- Lightweight: TSPhoenix is a very thin layer built-on top of AFNetworking\r\n- OAuth2: log in, out, auth tokens, etc.\r\n\r\n## Design goals\r\n\r\n- Plug and play\r\n- Allow developers to work with familiar Objective-C APIs, without having to worry about modeling / networking / caching\r\n- Leverage best OSS libraries. Don't reinvent the wheel\r\n- Significantly reduce the amount of glue code when working with Phoenix API\r\n- Things that will be done over and over again should be automated\r\n\r\n## Architecture\r\n\r\nTSPhoenix is a thin layer built on top of the networking and database layer. It includes **all** Phoenix data type models. It also includes a few helpers to make it easy to work with Phoenix APIs.\r\n\r\nTSPhoenixClient is the Singleton entry point to SDK. It is a standard AFHTTPClient subclass. It also owns all Phoenix modules (identity, media, syndicate, messaging, analytics).\r\n\r\n![Architecture](https://raw2.github.com/phoenixplatform/phoenix-ios-sdk/develop/images/architecture.png)\r\n\r\n## Work in progress\r\n\r\nTigerspike Phoenix SDK (TSPhoenix) for iOS is actively being developed. \r\n\r\nTSPhoenix is already powering Fuse which is a newsreader app. By using the SDK, Fuse developer only need to worry about how to deliver the UI. Modelling, caching and networking are all taken care of by TSPhoenix.\r\n\r\n## Status\r\n\r\n- Installation: only Cocoapod supported at the moment\r\n- Model generation: 100% working\r\n- Model mapping JSON -> Objective-C: 100% working\r\n- All contributions are welcome! Please use the \"Issues\" page to submit feedback.\r\n- Or fork and submit Pull Requests\r\n- First alpha release\r\n- Documentation is being baked\r\n- Unit Testing is on the TODO list\r\n\r\n## For the curious who wants to read some code\r\n\r\nIf you are interested in reading some Objective-C code, look into Source/ and Models/\r\n\r\nIf you are interested in how the models are automatically generated, look at Generators/\r\n\r\n\r\n## Dependencies\r\n\r\nWhy, you ask? Why have dependencies in a SDK library?\r\n\r\nThe reason is simple: don't re-invent the wheel. Everybody is already using AFNetworking for HTTP requests. YapDatabase is a solid key-value DB built on SQLite. If we roll our own networking and database, it will consume a ton of effort, and the result is not necessarily better. By leveraging the best open source components, \r\n\r\n[AFNetworking][afnetworking], ~>1.3.3 (using 1.3.x to maintain iOS 6 compatibility)\r\n[afnetworking]: https://github.com/AFNetworking/AFNetworking/tree/1.x\r\n\r\n[YapDatabase][yapdb] ~> 2.3\tDatabase (caching) layer in Phoenix SDK.\r\n[yapdb]: https://github.com/yaptv/YapDatabase\r\n\r\n\r\n## Full documentation is coming soon. Here are some examples to get you started:\r\n\r\n### Setting up\r\n\r\nIn - applicationDidFinishLaunching:\r\n\r\n\r\n    [TSPhoenixClient setUpWithBaseURL:[NSURL URLWithString:@\"https://api.phoenixplatform.com.sg/\"]\r\n                             clientID:@\"client_ID\"\r\n                         clientSecret:@\"top_secret\"\r\n                            projectID:123];\r\n\r\nBecause Phoenix has been deployed across many regions (and more coming), we make the baseURL configurable to allow TSPhoenix to point to any region (.sg, .uk, ...) and any environment (dev, hat, live).\r\n\r\n### Authenticating user\r\n\r\n    [[TSPhoenixClient identity] authenticateWithUsername:self.userField.text\r\n                                                password:self.passwordField.text\r\n                                                 success:^(AFOAuthCredential *credential) {\r\n                                                     // Token is automatically saved to keychain\r\n                                                     // It's also auto restored between app launches\r\n                                                 } failure:^(NSError *error) {\r\n                                                     // Handle error\r\n                                                 }];\r\n\r\n\r\n### Getting the current user's profile\r\n\r\n    NSString *path = @\"identity/v1/users/me\";\r\n    [[TSPhoenixClient sharedInstance] getPath:path\r\n                                   parameters:nil\r\n                                      success:^(AFHTTPRequestOperation *operation, id responseObject) {\r\n                                          NSDictionary *dict = [(AFJSONRequestOperation *)operation responseJSON];\r\n                                          dict = dict[@\"Data\"][0];\r\n                                          TSUser *user = [[TSUser alloc] initWithDictionary:dict];\r\n                                          \r\n                                          // Do something about the user\r\n                                          \r\n                                      } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\r\n                                          // Handle error\r\n                                      }];\r\n\r\n\r\n### Getting a list of subscribed sections in Syndicate\r\n\r\n    NSString *path = [NSString stringWithFormat:@\"syndicate/v1/projects/%d/sections\",\r\n                      [[TSPhoenixClient sharedInstance] projectID];\r\n    \r\n    NSArray *parameters = @[[TSPhoenixParameter pageNumberTemplateParameter],\r\n                            [TSPhoenixParameter pageSizeTemplateParameter],\r\n                            [TSPhoenixParameter sortByRankParameter],\r\n                            [TSPhoenixParameter sortDirectionAscendingParameter],\r\n                            [TSPhoenixParameter parameterWithName:@\"subscribedonly\"\r\n                                                            value:@\"true\"]];\r\n    \r\n    NSString *parameterString = [TSPhoenixParameter parameterStringFromParameters:parameters];\r\n    NSString *pattern = [path stringByAppendingString:parameterString];\r\n    TSPaginator *paginator = [[TSPaginator alloc] initWithRequestPatternPath:pattern\r\n                                                                  httpClient:self.client];\r\n\r\n    [self.client.paginators addObject:paginator];\r\n    \r\n    paginator.dataArrayKeyPath = @\"Data\";\r\n    paginator.objectCountKeyPathInResponse = @\"TotalRecords\";\r\n    paginator.zeroIndexed = YES;\r\n    paginator.perPage = kPhoenixResponsePageSize;\r\n    [paginator setObjectMappingBlock:^NSArray *(NSArray *sourceObjects) {\r\n        __block NSArray *destinationObjects;\r\n        destinationObjects = [sourceObjects mapObjectsUsingBlock:^id(id obj, NSUInteger idx) {\r\n            return [[TSSection alloc] initWithDictionary:obj];\r\n        }];\r\n        return destinationObjects;\r\n    }];\r\n    \r\n    __weak typeof(self) refToSelf = self;\r\n    \r\n    [paginator setCompletionBlockWithSuccess:^(TSPaginator *paginator, NSArray *objects, NSUInteger page) {\r\n\t\t\t\t// Do something about the result objects\r\n\t\t\t\t// e.g. save to database\r\n        [self.client saveObjectsToDatabase:objects];\r\n    } failure:^(TSPaginator *paginator, NSError *error) {\r\n        // Handle error\r\n    }];\r\n\r\n## Modules\r\n### TSPhoenixClient\r\n\r\nA **singleton** entry to all SDK modules. It is a standard AFHTTPClient subclass which handles all the underlying network traffic.\r\n\t[TSPhoenixClient sharedInstance]\r\n\t\r\nall modules are a property of the shared instance, i.e.\r\n\t[TSPhoenixClient sharedInstance].identity\r\n\t[TSPhoenixClient sharedInstance].syndicate\r\n\r\n\r\n### TSPhoenixIdentity\r\n\r\nPhoenix Identity module, responsible for OAuth logging in / out, loading memberships, etc.\r\n\r\n### TSPhoenixSyndicate\r\n\r\nPhoenix Syndicate module, responsible for loading and caching sections / articles, sending article interactions back to Phoenix.\r\n\r\n## Installation\r\n\r\nPlease read the [Phoenix Getting Started Guide](http://developers.phoenixplatform.com/GettingStarted) to get a basic understanding of Phoenix APIs.\r\n\r\nTo integrate the SDK:\r\n\r\n\tpod 'TSPhoenix', :git => 'https://github.com/phoenixplatform/phoenix-ios-sdk.git', :branch => 'develop'\r\n\r\nand then in Prefix.pch:\r\n\r\n\t#import <TSPhoenix/TSPhoenix.h>\r\n\r\nin AppDelegate.m -appDidFinishLaunching:\r\n\r\n\t[TSPhoenixClient setUpWithClientID:â€¦]\r\n\r\n\r\n## Database: [YapDatabase][yapdb]\r\n\r\nTSPhoenix provides out-of-the-box integration with YapDatabase. All model objects conform to NSCoding, meaning you can use TSPhoenix with other databases of your choice.\r\n\r\nWhy did we choose YapDatabase, not Core Data / FMDB / SQLite / ...\r\n\r\nThe criteria when choosing the database for TSPhoenix are:\r\n\r\n- Robust. Ideally, the database requires **no** maintenance\r\n- Flexibility. The DB should not break or complain if server-side model changes\r\n- Straightforward. Work at the objects level, not DB table.\r\n- Flexible & extensible\r\n\r\nWe evaluated many options, including Core Data and plain SQLite, among many others. \r\n\r\nCore Data doesn't work, because a). it enforces a strict schema, which requires migration between versions. b). there is no way to automatically generate .xcdatamodel from server models.  \r\n\r\nPlain SQLite is very low level. We don't want people to learn SQL before they can use TSPheonix. They should be talking Cocoa (NSObjects), not tables, queries, etc.\r\n\r\nFrom YapDatabase wiki:\r\n\r\n> YapDatabase is a comprised of 2 main features:\r\n\r\n> - a collection/key/value store built atop sqlite for iOS & Mac (the foundation)\r\n> - a plugin architecture that provides for advanced functionality such as Views, Secondary Indexes, Full Text Search, etc.\r\n\r\nThis [page][yapdb-why] sums it up perfectly on why we need a key-value database for TSPhoenix.\r\n\r\n[yapdb-why]: https://github.com/yaptv/YapDatabase/wiki/Why-did-we-create-YapDatabase\r\n\r\nIn the past few months, we put YapDatabase under stress, went though many version upgrades, changed the model multiple times. YapDB handled everything without breaking a sweat.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}